var sourceData215 = {"FileName":"C:\\local\\mw\\gh-isaacito12-bev\\Utility\\LocalTasks\\LiveScriptUtility2.m","RawFileContents":["classdef LiveScriptUtility2\r","\r","  %{\r","\r","From R2022a MATLAB, you can generate a Markdown file from a Live Script\r","with `export` command.\r","\r","- https://www.mathworks.com/help/matlab/ref/export.html\r","\r","Live Script Utility is a wrapper of the `export` command,\r","and it provides two functions:\r","\r","1. `LiveScriptUtility2.CheckAndGenerateMarkdown`\r","2. `LiveScriptUtility2.GenerateMarkdown`\r","\r","With these functions, you can specify the folder to store the Markdown and\r","media files.\r","\r","`CheckAndGenerateMarkdown` also checks the need of\r","generating a new Markdown file, and it skips the generation\r","if the source Live Script is not updated.\r","\r","  %}\r","\r","  % Copyright 2023-2024 The MathWorks, Inc.\r","\r","  methods (Static)\r","\r","    function converted = CheckAndGenerateMarkdown(LiveScriptFilenames, NameValuePairs)\r","      %% Generates Markdown files from Live Scripts.\r","      % If Markdown file already exists and its tme stamp is newer than\r","      % the source live script, this function skips generating a new Markdown.\r","      % You can force generate a new Markdown with ForceExport=true option.\r","      %\r","      % Use DisplayInfo=true option to see information from this function.\r","\r","      arguments (Input)\r","        % One or more Live Script files to convert to Markdown files.\r","        % Filenames can include either a relative or full path.\r","        LiveScriptFilenames (:,1) string {mustBeFile} = \"MyLiveScript.mlx\"\r","\r","        % A path to the folder to store Markdown files.\r","        % This path can be either relative or full.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MarkdownFolderPath (1,1) string = \"markdowns\"\r","\r","        % This path is relative to MarkdownFolderPath.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MediaFolderName (1,1) string = \"media\"\r","\r","        NameValuePairs.ForceExport (1,1) logical = false\r","\r","        NameValuePairs.DisplayInfo (1,1) logical = false\r","      end\r","\r","      arguments (Output)\r","        % An array of true or false values, representing generated (true) or skipped (false)\r","        % for the specified Live Scripts.\r","        converted (1,:) logical\r","      end\r","\r","      assert(all(endsWith(LiveScriptFilenames, \".mlx\")), \"File extension must be \"\".mlx\"\"\")\r","\r","      assert(NameValuePairs.MarkdownFolderPath ~= \".\", \"MarkdownFolderPath must not be the current folder.\")\r","\r","      assert(NameValuePairs.MediaFolderName ~= \".\", \"MediaFolderName must not be the current folder.\")\r","\r","      source_files = LiveScriptFilenames;\r","\r","      [~, name_part, ~] = fileparts(LiveScriptFilenames);\r","      markdown_file_name = name_part + \".md\";\r","      markdown_file_path = fullfile(NameValuePairs.MarkdownFolderPath, markdown_file_name);\r","\r","      dest_files = markdown_file_path;\r","\r","      numSourceFiles = numel(source_files);\r","      converted = false(1, numSourceFiles);\r","\r","      for idx = 1 : numSourceFiles\r","        src = source_files(idx);\r","        dst = dest_files(idx);\r","\r","        if NameValuePairs.DisplayInfo\r","          disp(\"Source: \" + src)\r","          disp(\"Destination: \" + dst)\r","        end\r","\r","        do_generate = LiveScriptUtility2.SourceFile_isNewerThan_destinationFile( ...\r","          Source = src, ...\r","          Destination = dst, ...\r","          DisplayInfo = NameValuePairs.DisplayInfo );\r","\r","        if NameValuePairs.ForceExport || do_generate\r","          disp(\"--> Exporting markdown from \" + source_files(idx))\r","\r","          mlxfile = source_files(idx);\r","\r","          LiveScriptUtility2.GenerateMarkdown( ...\r","            mlxfile, ...\r","            MarkdownFolderPath = NameValuePairs.MarkdownFolderPath, ...\r","            MediaFolderName = NameValuePairs.MediaFolderName )\r","\r","          converted(idx) = true;\r","        else\r","          disp(\"--> Skip. Markdown file is up to date for \" + source_files(idx))\r","        end  % if\r","      end  % for\r","    end  % function\r","\r","\r","    function GenerateMarkdown(LiveScriptFilename, NameValuePairs)\r","      %% Generates a Markdown file from a Live Script.\r","\r","      % This is a wrapper function for MALTAB's export command to generate\r","      % a Markdown file from a Live Script.\r","      %\r","      % If you convert \"mycode1.mlx\" Live Script with the export command,\r","      % it creates \"mycode1.md\" Markdown file. If the live script includes\r","      % plots or animations, and if you select to create separate media files,\r","      % export also creates \"mycode1_media\" folder in the current folder.\r","      % \"mycode1_media\" folder is used to store image files or movie files\r","      % generated from the Live Script and used by the Markdown file.\r","      %\r","      %   pwd >\r","      %       mycode1_media > figure_0.png, figure_1.png, ...\r","      %       mycode1.md\r","      %       mycode1.mlx\r","      %\r","      % If you convert \"mycode2.mlx\" and \"mycode3.mlx\" files to Markdown files,\r","      % you have \"mycode2_media\" and \"mycode3_media\" folders in the current folder too.\r","      %\r","      %   pwd >\r","      %       mycode1_media > figure_0.png, figure_1.png, ...\r","      %       mycode2_media > figure_0.png, figure_1.png, ...\r","      %       mycode3_media > figure_0.png, figure_1.png, ...\r","      %       mycode1.md\r","      %       mycode1.mlx\r","      %       mycode2.md\r","      %       mycode2.mlx\r","      %       mycode3.md\r","      %       mycode3.mlx\r","      %\r","      % With this wrapper function, by default, Markdown file is saved in\r","      % \"markdowns\" folder in the current folder, and the \"media\" folder is\r","      % moved below \"markdowns > media\" folder.\r","      %\r","      %   pwd >\r","      %       markdowns >\r","      %           media >\r","      %               mycode1_media > figure_0.png, figure_1.png, ...\r","      %               mycode2_media > figure_0.png, figure_1.png, ...\r","      %               mycode3_media > figure_0.png, figure_1.png, ...\r","      %           mycode1.md\r","      %           mycode2.md\r","      %           mycode3.md\r","      %       mycode1.mlx\r","      %       mycode2.mlx\r","      %       mycode3.mlx\r","\r","      arguments\r","        % A Live Script file to convert to a Markdown file.\r","        % This filename can include either a relative or full path.\r","        LiveScriptFilename (1,1) string {mustBeFile} = \"MyLiveScript.mlx\"\r","\r","        % A path to the folder to store Markdown files.\r","        % This path can be either relative or full.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MarkdownFolderPath (1,1) string = \"markdowns\"\r","\r","        % This path is relative to MarkdownFolderPath.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MediaFolderName (1,1) string = \"media\"\r","      end\r","\r","      assert(endsWith(LiveScriptFilename, \".mlx\"), \"File extension must be \"\".mlx\"\"\")\r","\r","      assert(NameValuePairs.MarkdownFolderPath ~= \".\", \"MarkdownFolderPath must not be the current folder.\")\r","\r","      assert(NameValuePairs.MediaFolderName ~= \".\", \"MediaFolderName must not be the current folder.\")\r","\r","      [~, name_part, ~] = fileparts(LiveScriptFilename);\r","\r","      markdown_destination_folder_path = NameValuePairs.MarkdownFolderPath;\r","\r","      if not(isfolder(markdown_destination_folder_path))\r","        disp(\"Creating destination folder: \" + markdown_destination_folder_path)\r","        mkdir(markdown_destination_folder_path)\r","      end\r","\r","      media_folder_basename = name_part + \"_media\";\r","\r","      % The *_media folder is created in the current working folder.\r","      media_folder_original_fullpath = fullfile(pwd, media_folder_basename);\r","\r","      media_folder_new_path = fullfile( markdown_destination_folder_path, ...\r","        NameValuePairs.MediaFolderName );\r","\r","      if not(isfolder(media_folder_new_path))\r","        disp(\"Creating media folder: \" + media_folder_new_path)\r","        mkdir(media_folder_new_path)\r","      end\r","\r","      % Media subfolder does not exist yet. It is created later.\r","      media_subfolder_new_path = fullfile(media_folder_new_path, media_folder_basename);\r","\r","      markdown_file_name = name_part + \".md\";\r","\r","      markdown_file_fullpath = fullfile(markdown_destination_folder_path, markdown_file_name);\r","\r","      disp(\"Generating Markdown file from Live Script: \" + LiveScriptFilename)\r","\r","      export( LiveScriptFilename, ...\r","        Format = \"markdown\", ...\r","        AcceptHTML = true, ...  Must be true to show images\r","        RenderLaTexOnline = \"off\", ... Do not access external internet sites from markdown file\r","        HideCode = false, ... Do not hide MATLAB code\r","        Run = true, ... Run script before export. Takes time, but necessary to always get expected result.\r","        IncludeOutputs = true, ... Include MATLAB output\r","        EmbedImages = false, ... Save images to individual image files\r","        FigureFormat = \"png\", ...\r","        FigureResolution = 120 ); ... This affects the size of image file\r","\r","      %% Update path strings in markdown file to point to the new image file path\r","\r","      % Generated Markdown file is in the current working folder.\r","      assert(isfile(markdown_file_name))\r","      content = fileread(markdown_file_name);\r","      content = string(content);\r","\r","      % File separator must be forward slash.\r","      target_string = \"<img src=\"\"\" + media_folder_basename + \"/\";\r","\r","      if contains(content, target_string) && (NameValuePairs.MediaFolderName ~= \".\")\r","        disp(\"Updating the path strings in the Markdown file for images.\")\r","\r","        % This path string is used within the generated Markdown\r","        % where 1) the path must be relative from the Markdown file's folder,\r","        % and 2) the folder separator must be backslash.\r","        new_path = NameValuePairs.MediaFolderName + \"/\" + media_folder_basename;\r","\r","        new_string = \"<img src=\"\"\" + new_path + \"/\";\r","\r","        new_content = replace(content, target_string, new_string);\r","\r","        % Move media folder and files generated from Live Script\r","        disp(\"Moving the media folder: \" + media_subfolder_new_path)\r","        copyfile(media_folder_original_fullpath + \"/*\", media_subfolder_new_path)\r","        rmdir(media_folder_original_fullpath, \"s\")\r","\r","      else\r","        disp(\"There is no medium.\")\r","        new_content = content;\r","      end\r","\r","      %% Move Markdown file to user-specified folder\r","\r","      new_tmp_mdfile = tempname(pwd) + \".md\";\r","\r","      fd = fopen(new_tmp_mdfile, \"w\");\r","      fprintf(fd, \"%s\", new_content);\r","      fclose(fd);\r","\r","      disp(\"Moving Markdown file: \" + markdown_file_fullpath)\r","\r","      copyfile(new_tmp_mdfile, markdown_file_fullpath)\r","      delete(new_tmp_mdfile)\r","\r","      if markdown_destination_folder_path ~= string(pwd)\r","        delete(markdown_file_name)\r","      end\r","\r","      disp(\"done\")\r","\r","    end  % function\r","\r","\r","    function source_is_newer = SourceFile_isNewerThan_destinationFile(NameValuePairs)\r","      %%\r","      arguments (Input)\r","        % Source file must exist.\r","        NameValuePairs.Source (1,1) {mustBeFile}\r","\r","        % Destination file may not exist.\r","        NameValuePairs.Destination (1,1) string\r","\r","        NameValuePairs.DisplayInfo (1,1) logical = false\r","      end\r","      arguments (Output)\r","        % This is true if either of these condisions is met:\r","        % - The source file is newer than the destination file.\r","        % - The destination file does not exist.\r","        source_is_newer (1,1) logical\r","      end\r","\r","      source_is_newer = false;\r","      sourcefile_info = dir(NameValuePairs.Source);\r","      % As of R2022b, serial date numbers are not recommended.\r","      % Convert the serial date number to a datetime value by using the datetime function.\r","      sourcefile_datetime = datetime(sourcefile_info.datenum, ConvertFrom=\"datenum\");\r","\r","      if NameValuePairs.DisplayInfo\r","        disp(\"Source time stamp\")\r","        disp(sourcefile_datetime)\r","      end\r","\r","      if isfile(NameValuePairs.Destination)\r","        destfile_info = dir(NameValuePairs.Destination);\r","        destfile_datetime = datetime(destfile_info.datenum, ConvertFrom=\"datenum\");\r","\r","        if NameValuePairs.DisplayInfo\r","          disp(\"Destination time stamp\")\r","          disp(destfile_datetime)\r","        end\r","\r","        if sourcefile_datetime > destfile_datetime\r","          source_is_newer = true;\r","        end  % if\r","      else\r","        % Destination file does not exist.\r","        source_is_newer = true;\r","      end  % if\r","    end  % function\r","\r","  end  % methods\r","end  % classdef\r",""],"CoverageDisplayDataPerLine":{"Function":[{"LineNumber":29,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":86,"ContinuedLine":false},{"LineNumber":111,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":65,"ContinuedLine":false},{"LineNumber":277,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":85,"ContinuedLine":false}],"Statement":[{"LineNumber":40,"Hits":[0,0],"StartColumnNumbers":[42,56],"EndColumnNumbers":[52,74],"ContinuedLine":false},{"LineNumber":45,"Hits":0,"StartColumnNumbers":57,"EndColumnNumbers":68,"ContinuedLine":false},{"LineNumber":49,"Hits":0,"StartColumnNumbers":54,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":51,"Hits":0,"StartColumnNumbers":51,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":53,"Hits":0,"StartColumnNumbers":51,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":62,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":91,"ContinuedLine":false},{"LineNumber":64,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":108,"ContinuedLine":false},{"LineNumber":66,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":68,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":70,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":57,"ContinuedLine":false},{"LineNumber":71,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":72,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":91,"ContinuedLine":false},{"LineNumber":74,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":76,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":77,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":79,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":80,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":81,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":83,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":84,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":85,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":88,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":89,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":22,"ContinuedLine":true},{"LineNumber":90,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":27,"ContinuedLine":true},{"LineNumber":91,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":53,"ContinuedLine":true},{"LineNumber":93,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":94,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":96,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":98,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":46,"ContinuedLine":false},{"LineNumber":99,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":19,"ContinuedLine":true},{"LineNumber":100,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":66,"ContinuedLine":true},{"LineNumber":101,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":62,"ContinuedLine":true},{"LineNumber":103,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":105,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":163,"Hits":[0,0],"StartColumnNumbers":[41,55],"EndColumnNumbers":[51,73],"ContinuedLine":false},{"LineNumber":168,"Hits":0,"StartColumnNumbers":57,"EndColumnNumbers":68,"ContinuedLine":false},{"LineNumber":172,"Hits":0,"StartColumnNumbers":54,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":175,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":85,"ContinuedLine":false},{"LineNumber":177,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":108,"ContinuedLine":false},{"LineNumber":179,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":181,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":183,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":75,"ContinuedLine":false},{"LineNumber":185,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":186,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":187,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":190,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":193,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":76,"ContinuedLine":false},{"LineNumber":195,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":72,"ContinuedLine":false},{"LineNumber":196,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":41,"ContinuedLine":true},{"LineNumber":198,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":199,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":63,"ContinuedLine":false},{"LineNumber":200,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":204,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":88,"ContinuedLine":false},{"LineNumber":206,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":208,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":94,"ContinuedLine":false},{"LineNumber":210,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":78,"ContinuedLine":false},{"LineNumber":212,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":213,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":true},{"LineNumber":214,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":25,"ContinuedLine":true},{"LineNumber":215,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":true},{"LineNumber":216,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":24,"ContinuedLine":true},{"LineNumber":217,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":true},{"LineNumber":218,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":29,"ContinuedLine":true},{"LineNumber":219,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":true},{"LineNumber":220,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":28,"ContinuedLine":true},{"LineNumber":221,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":true},{"LineNumber":226,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":227,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":228,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":231,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":233,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":84,"ContinuedLine":false},{"LineNumber":234,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":74,"ContinuedLine":false},{"LineNumber":239,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":241,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":243,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":246,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":68,"ContinuedLine":false},{"LineNumber":247,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":81,"ContinuedLine":false},{"LineNumber":248,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":251,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":252,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":257,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":259,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":260,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":261,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":263,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":265,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":266,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":268,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":269,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":272,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":281,"Hits":0,"StartColumnNumbers":37,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":286,"Hits":0,"StartColumnNumbers":51,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":295,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":296,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":299,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":85,"ContinuedLine":false},{"LineNumber":301,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":35,"ContinuedLine":false},{"LineNumber":302,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":303,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":306,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":307,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":308,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":83,"ContinuedLine":false},{"LineNumber":310,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":311,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":312,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":315,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":316,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":320,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":31,"ContinuedLine":false}]}}