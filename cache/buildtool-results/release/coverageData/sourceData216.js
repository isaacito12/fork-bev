var sourceData216 = {"FileName":"C:\\local\\mw\\gh-isaacito12-bev\\Utility\\LocalTasks\\LiveScript_Utility.m","RawFileContents":["classdef LiveScript_Utility\r","\r","  %{\r","\r","From R2022a MATLAB, you can generate a Markdown file from a Live Script\r","with `export` command.\r","\r","- https://www.mathworks.com/help/matlab/ref/export.html\r","\r","`LiveScript_Utility` is a wrapper of `export` command,\r","and it provides two functions:\r","\r","1. `LiveScript_Utility.CheckAndGenerateMarkdowns`\r","2. `LiveScript_Utility.GenerateMarkdown`\r","\r","With these functions, you can specify the folder to store the Markdown and\r","media files.\r","\r","`LiveScript_Utility.CheckAndGenerateMarkdowns` also checks the need of\r","generating a new Markdown file, and it skips the generation\r","if the source Live Script is not updated.\r","\r","  %}\r","\r","  % Copyright 2023-2024 The MathWorks, Inc.\r","\r","  methods (Static)\r","\r","    function CheckAndGenerateMarkdowns(LiveScriptFilenames, NameValuePairs)\r","      %% Generates Markdown files from Live Scripts.\r","\r","      arguments (Input)\r","        % One or more Live Script files to convert to Markdown files.\r","        % Filenames can include either a relative or full path.\r","        LiveScriptFilenames (:,1) string {mustBeFile} = \"MyLiveScript.mlx\"\r","\r","        % A path to the folder to store Markdown files.\r","        % This path can be either relative or full.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MarkdownFolderPath (1,1) string = \"Markdowns\"\r","\r","        % This path is relative to MarkdownFolderPath.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MediaFolderName (1,1) string = \"Media\"\r","\r","        NameValuePairs.ForceExport (1,1) logical = false\r","      end\r","\r","      assert(all(endsWith(LiveScriptFilenames, \".mlx\")), \"File extension must be \"\".mlx\"\"\")\r","\r","      assert(NameValuePairs.MarkdownFolderPath ~= \".\", \"MarkdownFolderPath must not be the current folder.\")\r","\r","      assert(NameValuePairs.MediaFolderName ~= \".\", \"MediaFolderName must not be the current folder.\")\r","\r","      source_files = LiveScriptFilenames;\r","\r","      dest_files = fullfile( NameValuePairs.MarkdownFolderPath, ...\r","                             replace(LiveScriptFilenames, \".mlx\", \".md\") );\r","\r","      for idx = 1 : numel(source_files)\r","        if NameValuePairs.ForceExport ...\r","        || LiveScript_Utility.SourceFile_isNewerThan_destinationFile( ...\r","            Source = source_files(idx), ...\r","            Destination = dest_files(idx) )\r","\r","          disp(\"--> Exporting markdown from \" + source_files(idx))\r","\r","          mlxfile = source_files(idx);\r","\r","          LiveScript_Utility.GenerateMarkdown( ...\r","            mlxfile, ...\r","            MarkdownFolderPath = NameValuePairs.MarkdownFolderPath, ...\r","            MediaFolderName = NameValuePairs.MediaFolderName )\r","\r","        else\r","          disp(\"--> Skip. Markdown file is up to date for \" + source_files(idx))\r","        end  % if\r","      end  % for\r","    end  % function\r","\r","\r","    function GenerateMarkdown(LiveScriptFilename, NameValuePairs)\r","      %% Generates a Markdown file from a Live Script.\r","\r","      % This is a wrapper function for MALTAB's export command to generate\r","      % a Markdown file from a Live Script.\r","      %\r","      % If you convert \"mycode1.mlx\" Live Script with the export command,\r","      % it creates \"mycode1.md\" Markdown file and \"mycode1_media\" folder\r","      % in the current folder. \"mycode1_media\" folder is used to store image files\r","      % generated from the Live Script and used by the Markdown file.\r","      %\r","      %   pwd >\r","      %       mycode1_media > figure_0.png, figure_1.png, ...\r","      %       mycode1.md\r","      %       mycode1.mlx\r","      %\r","      % If you convert \"mycode2.mlx\" and \"mycode3.mlx\" files to Markdown files,\r","      % you have \"mycode2_media\" and \"mycode3_media\" folders in the current folder too.\r","      %\r","      %   pwd >\r","      %       mycode1_media > figure_0.png, figure_1.png, ...\r","      %       mycode2_media > figure_0.png, figure_1.png, ...\r","      %       mycode3_media > figure_0.png, figure_1.png, ...\r","      %       mycode1.md\r","      %       mycode1.mlx\r","      %       mycode2.md\r","      %       mycode2.mlx\r","      %       mycode3.md\r","      %       mycode3.mlx\r","      %\r","      % With this wrapper function, by default, Markdown file is saved in\r","      % \"Markdowns\" folder in the current folder, and the \"media\" folder is\r","      % moved below \"Markdowns > Media\" folder.\r","      %\r","      %   pwd > \r","      %       Markdowns >\r","      %           Media > \r","      %               mycode1_media > figure_0.png, figure_1.png, ...\r","      %               mycode2_media > figure_0.png, figure_1.png, ...\r","      %               mycode3_media > figure_0.png, figure_1.png, ...\r","      %           mycode1.md\r","      %           mycode2.md\r","      %           mycode3.md\r","      %       mycode1.mlx\r","      %       mycode2.mlx\r","      %       mycode3.mlx\r","\r","      arguments\r","        % A Live Script file to convert to a Markdown file.\r","        % This filename can include either a relative or full path.\r","        LiveScriptFilename (1,1) string {mustBeFile} = \"MyLiveScript.mlx\"\r","\r","        % A path to the folder to store Markdown files.\r","        % This path can be either relative or full.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MarkdownFolderPath (1,1) string = \"Markdowns\"\r","\r","        % This path is relative to MarkdownFolderPath.\r","        % If the folder does not exist, it is created.\r","        NameValuePairs.MediaFolderName (1,1) string = \"Media\"\r","      end\r","\r","      assert(endsWith(LiveScriptFilename, \".mlx\"), \"File extension must be \"\".mlx\"\"\")\r","\r","      assert(NameValuePairs.MarkdownFolderPath ~= \".\", \"MarkdownFolderPath must not be the current folder.\")\r","\r","      assert(NameValuePairs.MediaFolderName ~= \".\", \"MediaFolderName must not be the current folder.\")\r","\r","      [~, name_part, ~] = fileparts(LiveScriptFilename);\r","\r","      markdown_destination_folder_path = NameValuePairs.MarkdownFolderPath;\r","\r","      if not(isfolder(markdown_destination_folder_path))\r","        disp(\"Creating destination folder: \" + markdown_destination_folder_path)\r","        mkdir(markdown_destination_folder_path)\r","      end\r","\r","      media_folder_basename = name_part + \"_media\";\r","\r","      media_folder_original_path = media_folder_basename;\r","\r","      media_folder_new_path = fullfile( markdown_destination_folder_path, ...\r","                                        NameValuePairs.MediaFolderName );\r","\r","      if not(isfolder(media_folder_new_path))\r","        disp(\"Creating media folder: \" + media_folder_new_path)\r","        mkdir(media_folder_new_path)\r","      end\r","\r","      % Media subfolder does not exist yet. It is created later.\r","      media_subfolder_new_path = fullfile( media_folder_new_path, ...\r","                                           media_folder_basename );\r","\r","      markdown_file_name = name_part + \".md\";\r","\r","      markdown_file_fullpath = fullfile(markdown_destination_folder_path, markdown_file_name);\r","\r","      disp(\"Generating Markdown file from Live Script: \" + LiveScriptFilename)\r","\r","      export( LiveScriptFilename, ...\r","        Format = \"markdown\", ...\r","        AcceptHTML = true, ...  Must be true to show images\r","        RenderLaTexOnline = \"off\", ... Do not access external internet sites from markdown file\r","        HideCode = false, ... Do not hide MATLAB code\r","        Run = true, ... Run script before export. Takes time, but necessary to always get expected result.\r","        IncludeOutputs = true, ... Include MATLAB output\r","        EmbedImages = false, ... Save images to individual image files\r","        FigureFormat = \"png\", ...\r","        FigureResolution = 120 ); ... This affects the size of image file\r","\r","      %% Update path strings in markdown file to point to the new image file path\r","\r","      % Generated Markdown file is in the current working folder.\r","      assert(isfile(markdown_file_name))\r","      content = fileread(markdown_file_name);\r","      content = string(content);\r","\r","      % File separator must be forward slash.\r","      target_string = \"<img src=\"\"\" + media_folder_basename + \"/\";\r","\r","      if contains(content, target_string) && (NameValuePairs.MediaFolderName ~= \".\")\r","        disp(\"Updating the path strings in the Markdown file for images.\")\r","\r","        % This path string is used within the generated Markdown\r","        % where 1) the path must be relative from the Markdown file's folder,\r","        % and 2) the folder separator must be backslash.\r","        new_path = NameValuePairs.MediaFolderName + \"/\" + media_folder_basename;\r","\r","        new_string = \"<img src=\"\"\" + new_path + \"/\";\r","\r","        new_content = replace(content, target_string, new_string);\r","      else\r","        new_content = content;\r","      end\r","\r","      %% Move media folder and files generated from Live Script\r","\r","      disp(\"Moving the media folder: \" + media_subfolder_new_path)\r","\r","      copyfile(media_folder_original_path + \"/*\", media_subfolder_new_path)\r","      rmdir(media_folder_original_path, \"s\")\r","\r","      %% Move Markdown file to user-specified folder\r","\r","      new_tmp_mdfile = tempname(pwd) + \".md\";\r","\r","      fd = fopen(new_tmp_mdfile, \"w\");\r","      fprintf(fd, \"%s\", new_content);\r","      fclose(fd);\r","\r","      disp(\"Moving Markdown file: \" + markdown_file_fullpath)\r","\r","      copyfile(new_tmp_mdfile, markdown_file_fullpath)\r","      delete(new_tmp_mdfile)\r","\r","      if markdown_destination_folder_path ~= string(pwd)\r","        delete(markdown_file_name)\r","      end\r","\r","      disp(\"done\")\r","\r","    end  % function\r","\r","\r","    function source_is_newer = SourceFile_isNewerThan_destinationFile(NameValuePairs)\r","      %%\r","      arguments (Input)\r","        % Source file must exist.\r","        NameValuePairs.Source (1,1) {mustBeFile}\r","\r","        % Destination file may not exist.\r","        NameValuePairs.Destination (1,1) string\r","      end\r","      arguments (Output)\r","        % This is true if either of these condisions is met:\r","        % - The source file is newer than the destination file.\r","        % - The destination file does not exist.\r","        source_is_newer (1,1) logical\r","      end\r","      source_is_newer = false;\r","      sourcefile_info = dir(NameValuePairs.Source);\r","      % As of R2022b, serial date numbers are not recommended.\r","      % Convert the serial date number to a datetime value by using the datetime function.\r","      sourcefile_datetime = datetime(sourcefile_info.datenum, ConvertFrom=\"datenum\");\r","      if isfile(NameValuePairs.Destination)\r","        destfile_info = dir(NameValuePairs.Destination);\r","        destfile_datetime = datetime(destfile_info.datenum, ConvertFrom=\"datenum\");\r","        if sourcefile_datetime > destfile_datetime\r","          source_is_newer = true;\r","        end  % if\r","      else\r","        % Destination file does not exist.\r","        source_is_newer = true;\r","      end  % if\r","    end  % function\r","\r","  end  % methods\r","\r","end  % classdef\r",""],"CoverageDisplayDataPerLine":{"Function":[{"LineNumber":29,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":75,"ContinuedLine":false},{"LineNumber":82,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":65,"ContinuedLine":false},{"LineNumber":246,"Hits":0,"StartColumnNumbers":4,"EndColumnNumbers":85,"ContinuedLine":false}],"Statement":[{"LineNumber":35,"Hits":[0,0],"StartColumnNumbers":[42,56],"EndColumnNumbers":[52,74],"ContinuedLine":false},{"LineNumber":40,"Hits":0,"StartColumnNumbers":57,"EndColumnNumbers":68,"ContinuedLine":false},{"LineNumber":44,"Hits":0,"StartColumnNumbers":54,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":46,"Hits":0,"StartColumnNumbers":51,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":49,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":91,"ContinuedLine":false},{"LineNumber":51,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":108,"ContinuedLine":false},{"LineNumber":53,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":55,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":41,"ContinuedLine":false},{"LineNumber":57,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":62,"ContinuedLine":false},{"LineNumber":58,"Hits":0,"StartColumnNumbers":29,"EndColumnNumbers":75,"ContinuedLine":true},{"LineNumber":60,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":39,"ContinuedLine":false},{"LineNumber":61,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":62,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":69,"ContinuedLine":true},{"LineNumber":63,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":38,"ContinuedLine":true},{"LineNumber":64,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":43,"ContinuedLine":true},{"LineNumber":66,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":68,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":70,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":46,"ContinuedLine":false},{"LineNumber":71,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":19,"ContinuedLine":true},{"LineNumber":72,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":66,"ContinuedLine":true},{"LineNumber":73,"Hits":0,"StartColumnNumbers":12,"EndColumnNumbers":62,"ContinuedLine":true},{"LineNumber":76,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":132,"Hits":[0,0],"StartColumnNumbers":[41,55],"EndColumnNumbers":[51,73],"ContinuedLine":false},{"LineNumber":137,"Hits":0,"StartColumnNumbers":57,"EndColumnNumbers":68,"ContinuedLine":false},{"LineNumber":141,"Hits":0,"StartColumnNumbers":54,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":144,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":85,"ContinuedLine":false},{"LineNumber":146,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":108,"ContinuedLine":false},{"LineNumber":148,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":102,"ContinuedLine":false},{"LineNumber":150,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":152,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":75,"ContinuedLine":false},{"LineNumber":154,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":155,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":156,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":159,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":161,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":57,"ContinuedLine":false},{"LineNumber":163,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":72,"ContinuedLine":false},{"LineNumber":164,"Hits":0,"StartColumnNumbers":40,"EndColumnNumbers":73,"ContinuedLine":true},{"LineNumber":166,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":167,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":63,"ContinuedLine":false},{"LineNumber":168,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":36,"ContinuedLine":false},{"LineNumber":172,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":64,"ContinuedLine":false},{"LineNumber":173,"Hits":0,"StartColumnNumbers":43,"EndColumnNumbers":67,"ContinuedLine":true},{"LineNumber":175,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":177,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":94,"ContinuedLine":false},{"LineNumber":179,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":78,"ContinuedLine":false},{"LineNumber":181,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":182,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":true},{"LineNumber":183,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":25,"ContinuedLine":true},{"LineNumber":184,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":true},{"LineNumber":185,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":24,"ContinuedLine":true},{"LineNumber":186,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":18,"ContinuedLine":true},{"LineNumber":187,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":29,"ContinuedLine":true},{"LineNumber":188,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":27,"ContinuedLine":true},{"LineNumber":189,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":28,"ContinuedLine":true},{"LineNumber":190,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":33,"ContinuedLine":true},{"LineNumber":195,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":40,"ContinuedLine":false},{"LineNumber":196,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":197,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":32,"ContinuedLine":false},{"LineNumber":200,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":202,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":84,"ContinuedLine":false},{"LineNumber":203,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":74,"ContinuedLine":false},{"LineNumber":208,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":80,"ContinuedLine":false},{"LineNumber":210,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":52,"ContinuedLine":false},{"LineNumber":212,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":214,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":219,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":66,"ContinuedLine":false},{"LineNumber":221,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":75,"ContinuedLine":false},{"LineNumber":222,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":44,"ContinuedLine":false},{"LineNumber":226,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":45,"ContinuedLine":false},{"LineNumber":228,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":38,"ContinuedLine":false},{"LineNumber":229,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":37,"ContinuedLine":false},{"LineNumber":230,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":17,"ContinuedLine":false},{"LineNumber":232,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":61,"ContinuedLine":false},{"LineNumber":234,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":54,"ContinuedLine":false},{"LineNumber":235,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":28,"ContinuedLine":false},{"LineNumber":237,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":238,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":34,"ContinuedLine":false},{"LineNumber":241,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":18,"ContinuedLine":false},{"LineNumber":250,"Hits":0,"StartColumnNumbers":37,"EndColumnNumbers":47,"ContinuedLine":false},{"LineNumber":261,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":30,"ContinuedLine":false},{"LineNumber":262,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":51,"ContinuedLine":false},{"LineNumber":265,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":85,"ContinuedLine":false},{"LineNumber":266,"Hits":0,"StartColumnNumbers":6,"EndColumnNumbers":43,"ContinuedLine":false},{"LineNumber":267,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":56,"ContinuedLine":false},{"LineNumber":268,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":83,"ContinuedLine":false},{"LineNumber":269,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":50,"ContinuedLine":false},{"LineNumber":270,"Hits":0,"StartColumnNumbers":10,"EndColumnNumbers":33,"ContinuedLine":false},{"LineNumber":274,"Hits":0,"StartColumnNumbers":8,"EndColumnNumbers":31,"ContinuedLine":false}]}}